// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Classes {
  id   Int    @id
  name String

  // used in
  Specs Specs[]
}

model Specs {
  id   Int    @id
  name String

  classId Int
  class   Classes @relation(fields: [classId], references: [id])

  role String
}

model Dungeons {
  id   Int    @id
  name String
  slug String
  time Int

  // used in
  Fights Fights[]
}

model Affixes {
  id       Int     @id
  name     String
  icon     String
  seasonal Boolean

  // used in
  firstAffix  Weeks[]   @relation("firstAffix")
  secondAffix Weeks[]   @relation("secondAffix")
  thirdAffix  Weeks[]   @relation("thirdAffix")
  Seasons     Seasons[]
}

model Expansions {
  id Int @id @default(autoincrement())

  name String
  slug String

  // used in
  Seasons Seasons[]
}

model Seasons {
  id Int @id @default(autoincrement())

  name      String
  slug      String
  startTime DateTime
  endTime   DateTime?

  expansionId Int
  expansion   Expansions @relation(fields: [expansionId], references: [id])

  affixId Int?
  affix   Affixes? @relation(fields: [affixId], references: [id])

  // used in
  Weeks Weeks[]
}

model Weeks {
  id Int @id @default(autoincrement())

  seasonId Int
  season   Seasons @relation(fields: [seasonId], references: [id])

  seasonWeekId Int

  affix1Id   Int
  firstAffix Affixes @relation("firstAffix", fields: [affix1Id], references: [id])

  affix2Id    Int
  secondAffix Affixes @relation("secondAffix", fields: [affix2Id], references: [id])

  affix3Id   Int
  thirdAffix Affixes @relation("thirdAffix", fields: [affix3Id], references: [id])

  // used in
  Fights Fights[]

  @@unique([seasonId, seasonWeekId])
}

model Reports {
  id        Int      @id @default(autoincrement())
  report    String   @unique @db.Char(16)
  region    String
  title     String
  startTime DateTime
  endTime   DateTime

  // used in
  Fights Fights[]
  Player Player[]
}

model Fights {
  id Int @id @default(autoincrement())

  fightId Int

  reportId Int
  report   Reports @relation(fields: [reportId], references: [id])

  dungeonId Int
  dungeon   Dungeons @relation(fields: [dungeonId], references: [id])

  keystoneTime     Int
  keystoneLevel    Int
  chests           Int
  dps              Int
  hps              Int
  dtps             Int
  totalDeaths      Int
  averageItemLevel Int

  player1 Int
  tank    Player @relation("tank-player", fields: [player1], references: [id])

  player2 Int
  heal    Player @relation("heal-player", fields: [player2], references: [id])

  player3 Int
  dps1    Player @relation("dps1-player", fields: [player3], references: [id])

  player4 Int
  dps2    Player @relation("dps2-player", fields: [player4], references: [id])

  player5 Int
  dps3    Player @relation("dps3-player", fields: [player5], references: [id])

  weekId Int
  week   Weeks @relation(fields: [weekId], references: [id])

  @@unique([fightId, reportId])
}

model Character {
  id Int @id

  name   String
  server String

  // used in
  Player Player[]
}

model Player {
  id Int @id @default(autoincrement())

  reportId Int
  report   Reports @relation(fields: [reportId], references: [id])

  characterId Int
  character   Character @relation(fields: [characterId], references: [id])

  dps       Int
  hps       Int
  deaths    Int
  itemLevel Int

  tank Fights[] @relation("tank-player")
  heal Fights[] @relation("heal-player")
  dps1 Fights[] @relation("dps1-player")
  dps2 Fights[] @relation("dps2-player")
  dps3 Fights[] @relation("dps3-player")
}
