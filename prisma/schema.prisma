// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  dps
  tank
  healer
}

enum PlayableClass {
  DemonHunter
  Mage
  Shaman
  Rogue
  Priest
  Warrior
  Druid
  DeathKnight
  Monk
  Paladin
  Warlock
  Hunter
}

model Class {
  id   Int           @id
  name PlayableClass @unique

  // used in
  Spec      Spec[]
  Character Character[]
  Talent    Talent[]
}

enum SpecName {
  Protection
  Fury
  Arms

  Fire
  Frost
  Arcane

  Assassination
  Sublety
  Outlaw

  Restoration
  Elemental
  Enhancement

  Shadow
  Holy
  Discipline

  BeastMastery
  Survival
  Marksmanship

  Mistweaver
  Brewmaster
  Windwalker

  // Restoration
  Guardian
  Balance
  Feral

  Vengeance
  Havoc

  // Protection
  // Holy
  Retribution

  Destruction
  Demonology
  Affliction

  Blood
  Unholy
  // Frost
}

model Spec {
  id   Int      @id
  name SpecName

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  role Role

  // used in
  Player Player[]
  Talent Talent[]

  @@unique([name, classId])
}

model Dungeon {
  id   Int    @id
  name String
  slug String
  time Int

  // used in
  Fight Fight[]
  Map   Map[]
}

enum Affixes {
  Skittish
  Volcanic
  Necrotic
  Raging
  Bolstering
  Sanguine
  Tyrannical
  Fortified
  Bursting
  Grievous
  Explosive
  Quaking
  Infested
  Reaping
  Beguiling
  Awakened
  Prideful
  Inspiring
  Spiteful
  Storming
}

model Affix {
  id       Int     @id
  name     Affixes
  icon     String
  seasonal Boolean

  // used in
  firstAffix  Week[]   @relation("firstAffix")
  secondAffix Week[]   @relation("secondAffix")
  thirdAffix  Week[]   @relation("thirdAffix")
  Seasons     Season[]
}

model Expansion {
  id Int @id @default(autoincrement())

  name String
  slug String

  // used in
  Season Season[]
}

model Season {
  id Int @id @default(autoincrement())

  name      String
  slug      String
  startTime DateTime
  endTime   DateTime?

  expansionId Int
  expansion   Expansion @relation(fields: [expansionId], references: [id])

  affixId Int?
  affix   Affix? @relation(fields: [affixId], references: [id])

  // used in
  Week Week[]
}

model Week {
  id Int @id @default(autoincrement())

  seasonId Int
  season   Season @relation(fields: [seasonId], references: [id])

  seasonWeekId Int

  affix1Id   Int
  firstAffix Affix @relation("firstAffix", fields: [affix1Id], references: [id])

  affix2Id    Int?
  secondAffix Affix? @relation("secondAffix", fields: [affix2Id], references: [id])

  affix3Id   Int?
  thirdAffix Affix? @relation("thirdAffix", fields: [affix3Id], references: [id])

  // used in
  Fight Fight[]

  @@unique([seasonId, seasonWeekId])
}

model Report {
  id     Int    @id @default(autoincrement())
  report String @unique @db.Char(16)

  regionId Int
  region   Region @relation(fields: [regionId], references: [id])

  title     String
  startTime DateTime
  endTime   DateTime

  // used in
  Fight  Fight[]
  Player Player[]
}

model Fight {
  id Int @id @default(autoincrement())

  fightId Int

  reportId Int
  report   Report @relation(fields: [reportId], references: [id])

  dungeonId Int
  dungeon   Dungeon @relation(fields: [dungeonId], references: [id])

  keystoneTime     Int
  keystoneLevel    Int
  chests           Int
  dps              Int
  hps              Int
  dtps             Int
  totalDeaths      Int
  averageItemLevel Int

  player1 Int
  tank    Player @relation("tank-player", fields: [player1], references: [id])

  player2 Int
  heal    Player @relation("heal-player", fields: [player2], references: [id])

  player3 Int
  dps1    Player @relation("dps1-player", fields: [player3], references: [id])

  player4 Int
  dps2    Player @relation("dps2-player", fields: [player4], references: [id])

  player5 Int
  dps3    Player @relation("dps3-player", fields: [player5], references: [id])

  weekId Int
  week   Week @relation(fields: [weekId], references: [id])

  // used in
  PlayerConduit       PlayerConduit[]
  PlayerTalent        PlayerTalent[]
  PlayerCovenantTrait PlayerCovenantTrait[]
  Pulls               Pulls[]

  @@unique([fightId, reportId])
}

model Character {
  id Int @id @default(autoincrement())

  name String

  serverId Int
  server   Server @relation(fields: [serverId], references: [id])

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  // used in
  Player Player[]

  @@unique([name, serverId])
}

model Player {
  id Int @id @default(autoincrement())

  reportId Int
  report   Report @relation(fields: [reportId], references: [id])

  characterId Int
  character   Character @relation(fields: [characterId], references: [id])

  specId Int
  spec   Spec @relation(fields: [specId], references: [id])

  dps       Int
  hps       Int
  deaths    Int
  itemLevel Int

  covenantId Int?
  covenant   Covenant? @relation(fields: [covenantId], references: [id])

  soulbindId Int?
  soulbind   Soulbind? @relation(fields: [soulbindId], references: [id])

  legendaryId Int?
  legendary   Legendary? @relation(fields: [legendaryId], references: [id])

  // used in
  tank                Fight[]               @relation("tank-player")
  heal                Fight[]               @relation("heal-player")
  dps1                Fight[]               @relation("dps1-player")
  dps2                Fight[]               @relation("dps2-player")
  dps3                Fight[]               @relation("dps3-player")
  PlayerConduit       PlayerConduit[]
  PlayerTalent        PlayerTalent[]
  PlayerCovenantTrait PlayerCovenantTrait[]
  CombatEvents        CombatEvents[]
}

enum Covenants {
  Kyrian
  Venthyr
  Necrolord
  NightFae
}

model Covenant {
  id Int @id

  name Covenants
  icon String

  // used in
  Player        Player[]
  Soulbind      Soulbind[]
  CovenantTrait CovenantTrait[]
}

model Soulbind {
  id Int @id

  name String
  icon String

  covenantId Int
  covenant   Covenant @relation(fields: [covenantId], references: [id])

  // used in
  Player Player[]
}

model Region {
  id Int @id @default(autoincrement())

  slug String @unique

  // used in
  Server Server[]
  Report Report[]
}

model Server {
  id Int @id @default(autoincrement())

  name     String
  regionId Int
  region   Region @relation(fields: [regionId], references: [id])

  // used in
  Character Character[]

  @@unique([name, regionId])
}

model Legendary {
  // effectId
  id Int @id

  itemId     Int
  effectIcon String
  effectName String

  // used in
  Player Player[]
}

model Conduit {
  id Int @id

  name        String
  abilityIcon String

  // used in
  PlayerConduit PlayerConduit[]
}

model PlayerConduit {
  id Int @id @default(autoincrement())

  itemLevel Int

  fightId Int
  fight   Fight @relation(fields: [fightId], references: [id])

  conduitId Int
  conduit   Conduit @relation(fields: [conduitId], references: [id])

  playerId Int
  player   Player @relation(fields: [playerId], references: [id])
}

model Talent {
  id Int @id

  name        String
  abilityIcon String

  classId Int
  class   Class @relation(fields: [classId], references: [id])

  specId Int
  spec   Spec @relation(fields: [specId], references: [id])

  // used in
  PlayerTalent PlayerTalent[]
}

model PlayerTalent {
  id Int @id @default(autoincrement())

  fightId Int
  fight   Fight @relation(fields: [fightId], references: [id])

  talentId Int
  talent   Talent @relation(fields: [talentId], references: [id])

  playerId Int
  player   Player @relation(fields: [playerId], references: [id])
}

model CovenantTrait {
  id Int @id

  name        String
  abilityIcon String

  covenantId Int
  covenant   Covenant @relation(fields: [covenantId], references: [id])

  // used in
  PlayerCovenantTrait PlayerCovenantTrait[]
}

model PlayerCovenantTrait {
  id Int @id @default(autoincrement())

  fightId Int
  fight   Fight @relation(fields: [fightId], references: [id])

  covenantTraitId Int
  covenantTrait   CovenantTrait @relation(fields: [covenantTraitId], references: [id])

  playerId Int
  player   Player @relation(fields: [playerId], references: [id])
}

model WCLAuth {
  id Int @id @default(autoincrement())

  token     String?
  expiresAt Int?
}

model Pulls {
  id Int @id @default(autoincrement())

  fightId Int
  fight   Fight @relation(fields: [fightId], references: [id])

  mapId Int
  map   Map @relation(fields: [mapId], references: [id])

  // used in
  CombatEvents CombatEvents[]
}

model Map {
  id Int @id

  dungeonId Int
  dungeon   Dungeon @relation(fields: [dungeonId], references: [id])

  // used in
  Pulls Pulls[]
}

model NPCsToPulls {
  id Int @id @default(autoincrement())

  amount Int

  npcId Int
  npc   NPCs @relation(fields: [npcId], references: [id])
}

model NPCs {
  id Int @id

  name String

  // used in
  NPCsToPulls NPCsToPulls[]
}

enum NonCombatEvent {
  // profession specific
  INVISIBILITY_POTION
  DIMENSIONAL_SHIFTER

  // class specific cooldowns
  // # rogue
  SHROUD_OF_CONCEALMENT
  SAP
  BLIND
  // # mage
  SHEEP
  // # demon hunter
  IMPRISON
  // # druid
  ENTANGLING_ROOTS
  // # monk
  PARALYSIS
  // # hunter
  // # death knight
  // # warrior
}

enum CombatEvent {
  // profession specific
  CARDBOARD_ASSASSIN
  DRUMS
  DISPOSABLE_SPECTROPHASIC_REANIMATOR

  // battle rez
  REBIRTH
  SOULSTONE

  // class specific cooldowns - everything that has 1+ min base cd
  // # mage
  COMBUSTION
  TIME_WARP
  ICY_VEINS
  // # shaman
  SPIRIT_LINK_TOTEM
  BLOODLUST
  HEROISM
  ASCENDANCE
  // # demon hunter
  METAMORPHOSIS
  FEL_DEVASTATION
  // # priest
  POWER_INFUSION // with meta: target player
  VOID_FORM
  POWER_WORD_BARRIER
  DESPERATE_PRAYER
  PAIN_SUPPRESSION
  // # druid
  CELESTIAL_ALIGNMENT
  FORCE_OF_NATURE
  BARKSKIN
  IRONBARK
  TRANQUILITY
  FLOURISH
  INNERVATE
  STAMPEDING_ROAR
  HEART_OF_THE_WILD
  URSOLS_VORTEX
  RENEWAL
  // # hunter
  ASPECT_OF_THE_TURTLE
  DOUBLE_TAP
  EXHILARATION
  // # paladin
  BLESSING_OF_PROTECTION
  DIVINE_SHIELD
  DIVINE_PROTECTION
  LAY_ON_HANDS
  AVENGING_WRATH
  HOLY_AVENGER
  BLESSING_OF_SACRIFICE
  // # warlock
  SHADOWFURY
  UNENDING_RESOLVE
  // # rogue
  ADRENALINE_RUSH
  EVASION
  CLOAK_OF_SHADOWS
  VANISH
  KILLING_SPREE
  MARKED_FOR_DEATH
  // # warrior
  SHIELD_WALL
  LAST_STAND
  // # monk
  INVOKE_XUEN
  STORM_EARTH_AND_FIRE
  TOUCH_OF_KARMA
  FORTIFYING_BREW
  DIFFUSE_MAGIC
  DAMPEN_HARM
  TOUCH_OF_DEATH
  // # death knight
  ARMY_OF_THE_DEAD
  ANTI_MAGIC_ZONE
  ICEBOUND_FORTITUDE
  DARK_TRANSFORMATION
  ANTI_MAGIC_SHELL
  UNHOLY_ASSAULT

  // covenant specific
  // # druid
  CONVOKE_THE_SPIRITS
  KINDRED_SPIRITS
  RAVENOUS_FRENZY
  // ADAPTIVE_SWARM 25s cd only
  // # paladin
  ASHEN_HALLOW
  DIVINE_TOLL
  // VANQUISHERS_HAMMER 30s cd only
  // BLESSING_OF_THE_SEASON 45s cd only; buff for other players
  // # hunter
  WILD_SPIRITS
  RESONATING_ARROW
  // FLAYED_SHOT 30s cd only
  // DEATH_CHAKRAM 45s cd only
  // # death knight
  SHACKLE_THE_UNWORTHY
  ABOMINATION_LIMB
  // DEATHS_DUE 30s cd only
  SWARMING_MIST
  // # mage
  MIRRORS_OF_TORMENT
  // RADIANT_SPARK 30s cd only
  DEATHBORNE
  SHIFTING_POWER
  // # demon hunter
  SINFUL_BRAND
  FODDER_TO_THE_FLAME
  THE_HUNT
  // # monk
  WEAPONS_OF_ORDER
  FALLEN_ORDER
  BONEDUST_BREW
  // FAELINE_STOMP 30s cd only
  // # priest
  BOON_OF_THE_ASCENDED
  // MINDGAMES 45s cd only
  UNHOLY_NOVA
  FAE_GUARDIANS // with meta: target player
  // # rogue
  // ECHOING_REPRIMAND 45s cd only
  FLAGELLATION
  // SERRATED_BONE_SPIKE 30s cd only
  SEPSIS
  // # shaman
  VESPER_TOTEM
  CHAIN_HARVEST
  // PRIMORDIAL_WAVE 45s cd only
  FAE_TRANSFUSION
  // # warlock
  // SCOURING_TITHE 40s cd only
  IMPENDING_CATASTROPHE
  // DECIMATING_BOLT 45s cd only
  SOUL_ROT
  // # warrior
  SPEAR_OF_BASTION
  // CONDEMN 6s cd only
  CONQUERORS_BANNER
  ANCIENT_AFTERSHOCK

  // dungeon specific
  NW_SPEAR
  NW_ORB
  NW_HAMMER
  NW_KYRIAN_ORB

  SOA_SPEAR

  HOA_GARGOYLE

  DOS_URN

  SD_LANTERN

  // affix specific
  HEALING_BY_SANGUINE
  EXPLOSIVE_KILLS // with meta: amount per role
}

model CombatEvents {
  id Int @id @default(autoincrement())

  combatEvent CombatEvent
  timestamp   Int
  meta        Json?

  pullId Int
  pulls  Pulls @relation(fields: [pullId], references: [id])

  playerId Int
  player   Player @relation(fields: [playerId], references: [id])
}

model NonCombatEvents {
  id Int @id @default(autoincrement())

  nonCombatEvent NonCombatEvent
  timestamp      Int
  meta           Json?
}
